'''
Copyright (c) 2012 Michael Dominice

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
'''
import datetime
import re
import socket
from dstack_tasks import admin


def ip_to_ints(ip):
    return list(map(int, ip.split('.')))


def cmp(a, b):
    return (a > b) - (a < b)


def compare_ip(ip1, ip2):
    """Comparator function for comparing two IPv4 address strings"""
    return cmp(ip_to_ints(ip1), ip_to_ints(ip2))


def get_created_comment():
    return '\n'.join([
        '# Autogenerated by hosts.py',
        '# https://github.com/mdomi/hosts',
        '# Updated: %s' % datetime.datetime.now()
    ])


class Hosts(object):
    def __init__(self, path):
        self.hosts = {}
        self.read(path)

    def get_one(self, host_name, raise_on_not_found=False):
        if host_name in self.hosts:
            return self.hosts[host_name]
        try:
            socket.gethostbyname(host_name)
        except socket.gaierror:
            if raise_on_not_found:
                raise Exception('Unknown host: %s' % (host_name,))
        return '[Unknown]'

    def print_one(self, host_name):
        print(host_name, self.get_one(host_name))

    def print_all(self, host_names=None):
        if host_names is None:
            for host_name in list(self.hosts.keys()):
                self.print_one(host_name)
        else:
            for host_name in host_names:
                self.print_one(host_name)

    def file_contents(self):
        reversed_hosts = {}
        for host_name in list(self.hosts.keys()):
            ip_address = self.hosts[host_name]
            if ip_address:
                if ip_address not in reversed_hosts:
                    reversed_hosts[ip_address] = [host_name]
                else:
                    reversed_hosts[ip_address].append(host_name)
        parts = []
        # print(self.hosts)
        # print(reversed_hosts)
        for ip_address in sorted(list(reversed_hosts.keys()), key=ip_to_ints):
            parts.append('\n# -- %s -- #' % (ip_address,))
            for host_name in sorted(reversed_hosts[ip_address]):
                parts.append('%s\t%s' % (ip_address, host_name))
            parts.append('# -- %s -- #' % (ip_address,))
        return '\n'.join([get_created_comment(), '\n'.join(parts), ''])

    def read(self, path):
        """Read the hosts file at the given location and parse the contents"""
        with open(path, 'r') as hosts_file:
            for line in hosts_file.read().split('\n'):
                if len(re.sub('\s*', '', line)) and not line.startswith('#'):
                    parts = re.split('\s+', line)
                    ip_address = parts[0]
                    for host_name in parts[1:]:
                        self.hosts[host_name] = ip_address

    def remove_one(self, host_name):
        """Remove a mapping for the given host_name"""
        del self.hosts[host_name]

    def remove_all(self, host_names):
        """Remove a mapping for the given host_name"""
        for host_name in host_names:
            self.remove_one(host_name)

    def write(self, path):
        """Write the contents of this hosts definition to the provided path"""
        try:
            contents = self.file_contents()
        except Exception as e:
            raise e

        # print(path)
        if not admin.isUserAdmin():
            admin.runAsAdmin()

        # print(args)

        with open(path, 'w') as hosts_file:
            hosts_file.write(contents)

            # import time
            # time.sleep(3)

    def set_one(self, host_name, ip_address):
        """Set the given hostname to map to the given IP address"""
        self.hosts[host_name] = ip_address

    def set_all(self, host_names, ip_address):
        """Set the given list of hostnames to map to the given IP address"""
        for host_name in host_names:
            self.set_one(host_name, ip_address)

    def alias_all(self, host_names, target):
        """Set the given hostname to map to the IP address that target maps to"""
        self.set_all(host_names, self.get_one(target, raise_on_not_found=True))


if __name__ == '__main__':
    import os
    import argparse

    parser = argparse.ArgumentParser(description='Manipulate your hosts file')

    parser.add_argument('name', nargs='+')
    parser.add_argument('--set', dest='ip_address')
    parser.add_argument('--alias')
    parser.add_argument('--get', action='store_true', default=False)
    parser.add_argument('--remove', action='store_true', default=False)
    parser.add_argument('--dry', action='store_true', default=False)

    args = parser.parse_args()

    if os.name == 'nt':
        hosts_path = os.path.abspath(
            os.path.join(os.environ['SYSTEMROOT'], r'system32\drivers\etc\hosts'))
    elif os.name == 'posix':
        hosts_path = '/etc/hosts'
    else:
        raise Exception('Unsupported OS: %s' % os.name)

    # print(hosts_path)
    hosts = Hosts(hosts_path)

    try:
        if args.get:
            hosts.print_all(args.name)
        elif args.alias is not None:
            hosts.alias_all(args.name, args.alias)
            if args.dry:
                print(hosts.file_contents())
            else:
                hosts.write(hosts_path)
        elif args.ip_address:
            if args.ip_address.startswith('tcp://'):
                args.ip_address = args.ip_address[6:-5]
            hosts.set_all(args.name, args.ip_address)
            if args.dry:
                print(hosts.file_contents())
            else:
                hosts.write(hosts_path)
        elif args.remove:
            hosts.remove_all(args.name)
            if args.dry:
                print(hosts.file_contents())
            else:
                hosts.write(hosts_path)

    except PermissionError:
        print('Runas administrator, grant permission')
    except Exception as e:
        print('Error: %s' % (e,))
        exit(1)


__author__ = 'Jason Vanzin'
import re  # useed for regular expressions


def validIP(ipaddress):
    """ str -> bool
    Found this on http://stackoverflow.com/questions/319279/how-to-validate-ip-address-in-python
    The function takes the IP address as a string and splits it by ".". It then checks to see if there are 4 items
    in the list. If not, it's not valid. Next, it makes sure the last two characters are not ".0", which would signify an
    invalid address. Third it checks the last character to make sure it's not a ".", which would be invalid. Lastly, it
    checks each item to make sure it's greater than 0 or equal to zero but less than or equal to 255.
    :param ipaddress:
    :return:
    """
    parts = ipaddress.split(".")
    if len(parts) != 4:
        return False
    if ipaddress[-2:] == '.0': return False
    if ipaddress[-1] == '.': return False
    for item in parts:
        if not 0 <= int(item) <= 255:
            return False
    return True


def isValidHostname(hostname):
    """ str -> bool
    Found this on from http://stackoverflow.com/questions/2532053/validate-a-hostname-string
    First it checks to see if the hostname is too long. Next, it checks to see if the first character is a number.
    If the last character is a ".", it is removed. A list of acceptable characters is then compiled and each section
    of the host name, split by any ".", is checked for valid characters. If there everything is valid, True is returned.
    :param hostname:
    :return:
    """
    if len(hostname) > 255:
        return False
    if hostname[0].isdigit(): return False
    if hostname[-1:] == ".":
        hostname = hostname[:-1]  # strip exactly one dot from the right, if present
    allowed = re.compile("(?!-)[A-Z\d-]{1,63}(?<!-)$", re.IGNORECASE)
    return all(allowed.match(x) for x in hostname.split("."))
